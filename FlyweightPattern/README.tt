<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>


GoF
Используйте общий доступ для эффективного использования большого количества мелкозернистых объектов.

Concept
GoF сказал следующее о flyweights:
Мухи - общий объект, который может использоваться в нескольких контекстах
одновременно. Мухомор действует как независимый объект в каждом
контекст - он неотличим от экземпляра объекта, который не является
общий. Флауэрс не может делать предположений о контексте, в котором
они работают. Ключевым понятием здесь является различие между внутренним и
внешнее состояние. Внутреннее состояние хранится в мухи; это состоит из
информации, которая не зависит от контекста мухи, тем самым делая это
совместное использование. Внешнее состояние зависит и зависит от контекста мухи
и поэтому не могут быть разделены. Клиентские объекты несут ответственность за
внешнее состояние до мухи, когда оно в ней нуждается.
Итак, вы можете сделать следующее:
• Мухи - это объект. Он пытается минимизировать использование памяти путем совместного использования
как можно больше данных с другими подобными объектами. Общие объекты
могут попытаться разрешить их использование в мелких деталях с минимальными затратами.
• В предыдущем выводе используются два общих термина: внутренние и
внешний. Внутреннее состояние сохраняется / делится в объекте мухи. На
с другой стороны, клиентские объекты сохраняют внешнее состояние, и эти объекты
передаются в объект мухи, когда они вызывают операции.

Real-Life Example
Предположим, у вас есть ручка. Вы можете использовать различные заправки чернил для записи разными цветами.
Таким образом, перо без пополнения можно считать мухой с внутренними данными, а
в этом примере заполнитель можно считать внешними данными.

Computer World Example
Этот шаблон помогает вам сэкономить память, уменьшив количество экземпляров объектов в
во время выполнения. Предположим, что в компьютерной игре у вас много участников, чьи
основные структуры одинаковы, но их внешний вид варьируется (например, они могут иметь
разные состояния, цвета, оружие и т. д.). Поэтому, если вы хотите сохранить все эти
объекты со всеми этими вариантами / состояниями, потребность в памяти будет огромной. Так,
вместо хранения всех этих объектов вы можете создать приложение таким образом, чтобы
вы создадите один из этих экземпляров, и ваш клиентский объект будет поддерживать все эти
вариации / состояние. Если вы можете успешно реализовать концепцию на этапе проектирования,
то вы выполнили шаблон Flyweight в приложении.
Рассмотрим другой пример. Предположим, компании необходимо распечатать визитные карточки для
его сотрудников. В этом случае, какова будет начальная точка? Бизнес может создавать
общий шаблон, в котором логотип компании, адрес и т. д. уже напечатан
(внутренняя), а позже компания будет размещать конкретные данные сотрудника (внешние) на
карты.
Другое распространенное использование этого шаблона показано в графическом представлении
символов в текстовом процессоре.


Illustration
В следующем примере используются только два типа объектов: малые и большие роботы. Но ты
может потребоваться много из них. Таким образом, вы хотите использовать шаблон Flyweight в этом случае.
Поскольку эти объекты схожи, вы не хотите создавать новый тип небольших
(или большого) робота, если у вас уже есть один из них. Другими словами, вы попытаетесь повторно использовать
существующий для удовлетворения ваших потребностей. Прочтите комментарии кодов для большей ясности.