

Преобразуйте интерфейс класса в другой интерфейс, который ожидают клиенты. Адаптер
шаблон позволяет занятиям работать вместе, что в противном случае не могло бы привести к несовместимости
интерфейсы.

Основную концепцию лучше всего описывают следующие примеры.


Общее использование этого шаблона - это когда вы используете адаптер электрической розетки / мощность переменного тока
адаптер в международных поездках. Эти адаптеры могут действовать как посредники,
электронное устройство, скажем, ноутбук, который принимает источник питания в США, может быть подключен к
Европейская розетка. Рассмотрим другой пример. Предположим, вам нужно
мобильный телефон. Но вы видите, что электрическая розетка не совместима с вашим зарядным устройством.
В этом случае вам может потребоваться использовать адаптер. Даже переводчик, который конвертирует один
язык в другой может считаться следствием этой картины в реальной жизни.
Теперь представьте ситуацию, когда вам нужно подключить приложение к адаптеру
(который в этом примере является X-образным) для использования предполагаемого интерфейса. Без использования этого
адаптер, вы не можете присоединиться к приложению и интерфейсу.

Предположим, у вас есть приложение, которое можно разделить на две части: пользователь
интерфейс (интерфейс или интерфейс) и база данных (обратная сторона). Через пользовательский интерфейс,
клиенты могут передавать определенный тип данных или объектов. Ваша база данных совместима с
эти объекты и могут хранить их плавно. В течение определенного периода времени вы можете почувствовать, что вы
необходимо обновить программное обеспечение, чтобы сделать ваших клиентов счастливыми. Таким образом, вы можете разрешить
некоторый другой тип объекта также должен пройти через пользовательский интерфейс. Но в этом случае первое сопротивление
будет поступать из вашей базы данных, потому что он не может хранить эти новые типы объектов. В таком
В ситуации вы можете использовать адаптер, который позаботится о преобразовании этих новых
объектов к совместимой форме, которую может принять ваша старая база данных.
Простое использование этого шаблона описано в следующем примере.


В этом примере вы можете легко вычислить площадь прямоугольника. В классе Calculator,
вам нужно предоставить прямоугольник в методе GetArea (), чтобы получить область прямоугольника.
Теперь предположим, что вы хотите рассчитать площадь треугольника. Но ваше ограничение состоит в том, что вы
хотите получить его область через метод GetArea () класса Calculator. Как вы можете это достичь?
Чтобы справиться с этой проблемой, вы делаете CalculatorAdapter для треугольника и передаете
треугольник в методе GetArea (). В свою очередь, метод будет рассматривать эти треугольники, как
прямоугольники для получения областей из метода GetArea () класса Calculator