<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>


Прилагайте дополнительные обязанности к объекту динамически. Декораторы обеспечивают гибкость
альтернатива подклассу для расширения функциональности.


Этот шаблон способствует тому, что ваш класс должен быть закрыт для модификации
но открыт для расширения. Другими словами, вы можете добавить функциональность, не нарушая
существующие функции. Эта концепция полезна, когда вы хотите добавить некоторые специальные
функциональность для конкретного объекта, а не для всего класса. Этот шаблон предпочитает объект
состав над наследованием. Когда вы освоите эту технику, вы можете добавить новые
ответственности перед объектом, не затрагивая базовые классы.

Предположим, у вас есть одноэтажный дом, и вы решили построить второй этаж поверх него.
Очевидно, что вы, возможно, не захотите изменить архитектуру первого этажа. Но вы можете
хотите изменить дизайн архитектуры для вновь добавленного пола, не затрагивая
существующая архитектура.
Рисунок 7-1, Рисунок 7-2 и Рисунок 7-3 иллюстрируют эту концепцию.

Предположим, что в наборе инструментов на основе графического интерфейса вы хотите добавить некоторые свойства границ. Вы можете это сделать
с наследованием, но это нельзя рассматривать как окончательное решение, потому что у вас нет
абсолютный контроль над всем с самого начала. Таким образом, эта техника носит статический характер.
Декораторы предлагают гибкий подход. Они пропагандируют концепцию динамического выбора.
Например, вы можете окружить компонент в другом объекте. Вложенный объект
называется декоратором, и он должен соответствовать интерфейсу компонента, который он
декорирует. Он будет перенаправлять запросы компоненту, и он может выполнять дополнительные
операций до или после этих запросов. Фактически, вы можете добавить неограниченное количество
ответственности с этой концепцией.