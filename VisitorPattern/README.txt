

Представление операции, выполняемой над элементами структуры объекта. посетитель
позволяет вам определить новую операцию без изменения классов элементов, на которых она
работает.


С помощью этого шаблона вы выделяете алгоритм из структуры объекта. Итак, вы можете добавить
новые операции без изменения существующей архитектуры. Этот шаблон поддерживает
принцип открытия / закрытия (который говорит, что расширение разрешено, но изменение запрещено
такие как класс, функция, модули и т. д.).


Подумайте о сценарии бронирования такси. Когда такси прибывает в вашу дверь, и вы входите
транспортное средство, посещение такси берет под контроль транспорт. Это может привести вас к
через новый маршрут, с которым вы не знакомы, и в худшем случае он
может изменить назначение.



Этот шаблон полезен, когда публичные API-интерфейсы должны поддерживать подключаемые операции. клиенты
могут затем выполнять свои предполагаемые операции над классом (с классом посещения) без
изменение источника.



Это простой пример для представления шаблона посетителя. Рисунок 13-1 показывает два
иерархий; интерфейс IOriginalInterface и конкретный класс Myclass (который
реализует интерфейс IOriginalInterface) размещаются в оригинальной / существующей
иерархия. Интерфейс IVisitor и конкретный класс Visitor размещены в новом
иерархия. Цель состоит в том, что любые операции модификации / обновления через этот новый класс
иерархия не должна изменять код в иерархии IOriginalInterface (существующей).
Итак, теперь предположим, что в этом примере вы хотите изменить начальное целое число
значение в MyClass, но ваше ограничение состоит в том, что вы не можете изменить исходный код в
IOriginalInterface. Вы можете использовать шаблон посетителя в таком сценарии.
Итак, в следующем примере вы отделяете функциональные реализации
(другими словами, алгоритмы) из иерархии классов и выполнения вашего намерения.