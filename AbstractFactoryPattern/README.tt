<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>

Определение
Предоставить интерфейс для создания семейств связанных или зависимых объектов без
указав их конкретные классы.

Концепция
Абстрактная фабрика называется фабрикой фабрик. В этом шаблоне вы предоставляете
инкапсулировать группу отдельных фабрик, имеющих общую тему. В этом процессе,
вы не указываете или не определяете их конкретные классы.
Этот шаблон помогает вам обменивать конкретные реализации без изменения
код, который их использует, даже во время выполнения. Однако это может привести к ненужному
сложности и дополнительной работы. В некоторых случаях даже отладка становится жесткой.


Предположим, вы украшаете свою комнату двумя различными типами таблиц; один из них
дерева и одного из стали. Для деревянного типа вам необходимо посетить плотника, а для
другой тип, вам, возможно, придется пойти в металлический магазин. Все это настольные фабрики. Итак, на основе
по требованию вы решаете, какой завод вам нужен.


ADO.NET уже реализовал аналогичные концепции, чтобы установить соединение сбаза данных.
Чтобы понять этот шаблон, вы можете расширить свое понимание
Заводская модель. В шаблоне Factory Method у вас есть две фабрики; один
для создания собак, а другой - для создания тигров. Но теперь предположим, вы хотите
классифицировать собак и тигров дальше; вы выбираете животное домашнее животное (собаку или тигр) или дикую
животное (собака или тигр) через фабрики. Чтобы удовлетворить это требование, вы вводите два
Бетонные заводы: WildAnimalFactory и PetAnimalFactory. WildAnimalFactory - это
ответственный за создание диких животных, и PetAnimalFactory отвечает за создание
домашние животные.