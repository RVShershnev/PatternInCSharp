<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>

Определение
Нет общепринятого определения. Итак, давайте выберем определение из
Википедия, в которой говорится следующее:
«В объектно-ориентированном компьютерном программировании нулевой объект - это объект с
нет ссылочного значения или с определенным нейтральным («нулевым») поведением. Нулевой объект
шаблон проектирования описывает использование таких объектов и их поведение (или отсутствие
). Он был впервые опубликован на языках шаблонов программирования программ
серия книг."

Концепция
Шаблон может реализовать отношение «ничего не сделанное» или может предоставить значение по умолчанию
когда приложение встречает нулевой объект вместо реального объекта. В простом
слов, основная цель - сделать лучшее решение, избегая «проверки нулевых объектов» или
«Null collation check» через блоки.
Чтобы лучше объяснить концепцию, я объясню проблемы, связанные с
следующая программа (которая в основном является неисправной программой), анализирует возможные решения,
и, в конечном счете, реализовать концепцию этого шаблона проектирования.

Пример из реальной жизни
Стиральная машина может правильно стираться, если дверь закрыта, и есть гладкая вода
без внутренней утечки. Но предположим, что однажды вы забудете закрыть
дверь или подача воды прекращаются во время работы. Стиральная машина не должна
наносить ущерб самому себе в этих ситуациях, и он должен издавать звуковой сигнал или создавать некоторые
чтобы привлечь внимание к проблеме.

Пример из комьютерного мира
Как упоминалось ранее, в корпоративном приложении вы можете избежать большого количества нулевых
проверяет и блокирует ли / else этот шаблон проектирования. Следующая реализация
дает хороший обзор этого шаблона.

Встречающиеся исключение
На этот раз вы получите исключение System.NullReferenceException во время выполнения, так как
показанном на рисунке 25-1.

Немедленное устранение
Непосредственным средством является выполнение нулевой проверки перед вызовом операции, как показано
Вот:
if (vehicle != null)
{
vehicle.Travel();
}

Анализ
Это решение будет работать в этом случае. Но подумайте о корпоративном приложении. Если вам нужно
делать нулевые проверки для каждого возможного сценария, подобного этому, у вас есть n число условий if
оценить. Это сделает ваш код грязным, а в качестве побочного эффекта обслуживание
становится жестким. Вместо этого вы можете использовать шаблон Null Object в этом сценарии.

Иллюстрация
В реализации кода предположите, что у вас есть два типа транспортных средств: автобус и поезд.
Клиент может выбрать автобус или поезд через разные входы: a или b. Если по ошибке
пользователь передает любые недопустимые данные (другими словами, любой ввод, отличный от a или b в этом случае),
пользователь не может путешествовать вообще. Приложение будет игнорировать те недопустимые
ничего через объект NullVehicle. В следующем примере вы не будете создавать
Объекты NullVehicle неоднократно; как только объект NullVehicle будет создан, вы просто
повторно использовать этот объект.

Рассмотрим следующее:
• Недопустимые входы и их эффекты выделены жирным шрифтом.
• Обратите внимание, что количество объектов не увеличивается из-за нулевого транспортного средства
объектов / недопустимых входов.
• Вы не выполнили нулевой чек. Тем не менее выполнение программы не
прерывается из-за неверных пользовательских входов.

Сессия Q & A
В начале реализации я вижу дополнительную объект создается. Это намеренно?
Ответ:
Чтобы сохранить некоторую память / память компьютера, я следил за
Синтаксический шаблонный шаблонный механизм в архитектуре
Класс NullVehicle. Вы не хотите создавать NullVehicle
объект для каждого недопустимого ввода. В течение некоторого времени, вполне вероятно, что
для приложения может потребоваться большое количество недействительных
входы. Если вы не будете защищать эту ситуацию, огромное количество
объектов NullVehicle будут находиться в системе (которая в основном
бесполезны), и они будут занимать большой объем памяти, а вы
могут заметить плохие побочные эффекты. (Например, система может
медленнее, время отклика приложений может увеличиться и т. д.)
2. Когда вы должны использовать этот шаблон?
Ответ:
• Шаблон полезен, если вы не хотите Исключение NullReferenceException (например, если по ошибке вы пытаетесь вызывать метод нулевого объекта).
• В коде можно игнорировать множество нулевых проверок.
• Без этих нулевых проверок вы сделаете свой код более чистым и легким ремонтопригодным.
3. Каковы проблемы, связанные с Null Object шаблон?
Ответ:
• Чаще всего вам может понадобиться найти и исправить основную причину сбоя.
Итак, если вы выбрали исключение NullReferenceException, которое может работать лучше
для тебя. Вы всегда можете обрабатывать эти исключения в try / catch
блок или в блок try / catch / finally и обновить журнал информации.
• Шаблон Null Object в основном помогает вам реализовать
поведение по умолчанию, когда вы неосознанно хотите иметь дело с
объект, которого нет вообще. Но попытка поставить такой дефолт
поведение для всех видов объектов всегда не подходит.